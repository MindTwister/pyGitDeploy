#!/usr/bin/env python
from __future__ import print_function
from git import *
import sys,getpass,ftplib,getopt,os

#readline is not available on windows
try:
    import readline
    gotReadline = True
except ImportError:
    gotReadline = False

class Deploy:
    deletedFiles = []
    updatedFiles = []
    
    def __init__(self,verbosity=0,dry=False,path=""):
        self.verbose = verbosity
        self.dry = dry
        self.repo = Repo(path)
        os.chdir(self.repo.working_dir)
        self.configReader = self.repo.config_reader()
    
    def setVerbose(self,verbose):
        self.verbose = verbose
    
    #raw_input with editable default values
    def raw_input_default(self,prompt, default):
        if gotReadline:
            def pre_input_hook():
                readline.insert_text(default)
                readline.redisplay()
      
            readline.set_pre_input_hook(pre_input_hook)
            try:
                return raw_input(prompt)
            finally:
                readline.set_pre_input_hook(None)
        else:
            #No readline :(
            if(default != ""):
                prompt = "[" + default + "] " + prompt
            
            val = raw_input(prompt)
            if val == "":
                val = default
            return val
    
    
    def checkFiles(self,deployVersion):
        
        self.deployVersion = self.repo.commit(deployVersion).name_rev.split(" ")[0]
        
        if self.configReader.has_option("ftp","lastDeploy"):
            lastDeploy = self.configReader.get_value("ftp","lastDeploy")
            changes = self.repo.commit(lastDeploy).diff(deployVersion)
        else:
            self.out("No previous deployments, adding all files",verbosity=0)
            for file in Git(self.repo.working_dir).ls_files().split("\n"):
                self.out("  ",file,verbosity=4)
                self.updatedFiles.append(file)
            return
        
        
        self.out("Added files:")
        for fileAdded in changes.iter_change_type('A'):
            self.out("  ",fileAdded.b_blob.path)
            self.updatedFiles.append(fileAdded.b_blob.path)
        
        self.out("Updated files")
        for fileUpdated in changes.iter_change_type('M'):
            self.out("  ",fileUpdated.a_blob.path)
            self.updatedFiles.append(fileUpdated.a_blob.path)
        
        self.out("Deleted files")
        for fileDeleted in changes.iter_change_type('D'):
            self.out("  ",fileDeleted.a_blob.path)
            self.deletedFiles.append(fileDeleted.a_blob.path)
        
        self.out("Renamed files")
        for fileRenamed in changes.iter_change_type('R'):
            self.out("  From: ",fileRenamed.a_blob.path, " to ", fileRenamed.b_blob.path)

    
    def connectFTP(self,rebuild_config=False):
        
        if self.configReader.has_option("ftp","remoteServer"):
            self.remoteServer = self.configReader.get_value("ftp","remoteServer")
        else:
            default = ""
            if rebuild_config:
                default = self.remoteServer
            self.remoteServer = self.raw_input_default("Server: ",default)
        
        
        if self.configReader.has_option("ftp","remoteUser"):
            self.remoteUser = self.configReader.get_value("ftp","remoteUser")
        else:
            default = ""
            if rebuild_config:
                default = self.remoteUser
            self.remoteUser = self.raw_input_default("Username: ",default)
        
        self.savePass = False
        
        if self.configReader.has_option("ftp","remotePassword"):
            self.remotePassword = self.configReader.get_value("ftp","remotePassword")
            self.savePass = True
        else:
            self.remotePassword = getpass.getpass("Password: ")
        
        if self.configReader.has_option("ftp","remoteDir"):
            self.remoteDir = self.configReader.get_value("ftp","remoteDir")
        else:
            default = ""
            if rebuild_config:
                default = self.remoteDir
            self.remoteDir = self.raw_input_default("Remote directory: ",default)
        
        if(self.configReader.has_option("ftp","savePass") == False and not self.configReader.has_option("ftp","remotePassword")):
                if raw_input("Save password (y/n):").lower() == "y":
                    self.savePass = True
        
        while self.remoteDir.startswith("/"):
            self.remoteDir = self.remoteDir[1:]
        
        while self.remoteDir.endswith("/"):
            self.remoteDir = self.remoteDir[:-1]
        
        try:
            self.ftp = ftplib.FTP(self.remoteServer,self.remoteUser,self.remotePassword)
            self.ftp.cwd("/" + self.remoteDir)
        except ftplib.all_errors as connectionError:
            self.out("Error connecting to server: ", connectionError,verbosity=0)
            if raw_input("Retry (y/n)?: ").lower() == "y":
                self.connectFTP(True)
            else:
                exit(255)
                
        self.rootFolder =  self.remoteDir
    
    def parseDirectories(self):
        self.dirs = {}
        for file in self.updatedFiles:
            dirs = file.split('/')[:-1]
            cwd = self.dirs
            for dir in dirs:
                if dir not in cwd:
                    cwd[dir] = {}
                    
                cwd = cwd[dir]
    
    def checkDirectories(self,cwd = "",folders = {}):
        if cwd == "":
            cwd = "/" + self.rootFolder
            folders = self.dirs
        if self.ftp:
            self.out("Checking folders under", cwd)
            
            for dir,subFolders in folders.iteritems():
                
                self.out("Checking ", cwd + "/" + dir)
                try:
                    self.ftp.cwd(cwd + "/" + dir)
                except:
                    self.out("Creating previously non-existing folder", cwd + "/" + dir,verbosity=0)
                    if not self.dry:
                        self.ftp.mkd(cwd + "/" + dir)
                self.checkDirectories(cwd+"/"+dir,subFolders)
                
            if cwd == "/" + self.rootFolder:
                self.ftp.cwd(cwd)
    def deleteFiles(self):
        for file in self.deletedFiles:
            self.out("Deleting ",file,verbosity=0)
            if not self.dry:
                try:
                    self.ftp.delete(file)
                except:
                    self.out("Error: ",file," did not exist online, could have been deletet by other means",verbosity=0)
        
    def uploadFiles(self):
        for file in self.updatedFiles:
            self.out("Uploading",file,verbosity=0)
            if not self.dry:
                self.ftp.storbinary("STOR " + file,open(file,'rb'))
        infoWriter = self.repo.config_writer()
        if not self.dry:
            infoWriter.set_value('ftp','lastDeploy',self.deployVersion)
        infoWriter.set_value('ftp','remoteUser',self.remoteUser)
        infoWriter.set_value('ftp','remoteDir',self.remoteDir)
        infoWriter.set_value('ftp','remoteServer',self.remoteServer)
        if self.savePass:
            infoWriter.set_value('ftp','remotePassword',self.remotePassword)
            
    def out(self,*args,**kwargs):
        try:
            verbosity = kwargs["verbosity"]
        except:
            verbosity = 5
        if self.verbose >= verbosity:
            for a in args:
                if a != "":
                    print(a,end=" ")
            print("")

if __name__ == "__main__":
    
    args = {
        "dry" : False,
        "commit" : "HEAD",
        "verbose" : 1
    }

    options, arguments = getopt.getopt(sys.argv[1:],"vn",["dry-run","verbose"])
    if len(arguments):
        args["commit"] = arguments[0]
    else:
        args["commit"] = "HEAD"
    
    for option, value in options:
        if option in ("-n", "--dry-run"):
            args["dry"] = True
        
        if option in ("-v","--verbose"):
            if value == "":
                value = 5
            args["verbose"] = value
    
    
    deploy = Deploy(path=os.getcwd(),verbosity=args["verbose"],dry=args["dry"])
            
    deploy.checkFiles(args["commit"])
    deploy.parseDirectories()
    deploy.connectFTP()
    deploy.checkDirectories()
    deploy.deleteFiles()
    deploy.uploadFiles()
    
