#!/usr/bin/env python
from git import *
import sys,getpass,ftplib,weakref

class Deploy:
    deletedFiles = []
    updatedFiles = []
    
    def __init__(self):
        self.repo = Repo("")
        self.configReader = self.repo.config_reader()
        self.checkFiles()
        self.connectFTP()
        self.uploadFiles()
    
    def checkFiles(self):
        
        if self.configReader.has_option("ftp","lastDeploy"):
            lastDeploy = self.configReader.get_value("ftp","lastDeploy")
        else:
            lastDeploy = self.repo.head.reference.log()[0].newhexsha
            
        changes = self.repo.commit(lastDeploy).diff('HEAD')
        print "Added files:"
        for fileAdded in changes.iter_change_type('A'):
            print "  ",fileAdded.b_blob.path
            self.updatedFiles.append(fileAdded.b_blob.path)
        
        print "Updated files"
        for fileUpdated in changes.iter_change_type('M'):
            print "  ",fileUpdated.a_blob.path
            self.updatedFiles.append(fileUpdated.a_blob.path)
        
        print "Deleted files"
        for fileDeleted in changes.iter_change_type('D'):
            print "  ",fileDeleted.a_blob.path
            self.deletedFiles.append(fileDeleted.a_blob.path)
        
        print "Renamed files"
        for fileRenamed in changes.iter_change_type('R'):
            print "  From: ",fileRenamed.a_blob.path, " to ", fileRenamed.b_blob.path

    
    def connectFTP(self,rebuild_config=False):
        
        if self.configReader.has_option("ftp","remoteServer"):
            remoteServer = self.configReader.get_value("ftp","remoteServer")
        else:
            remoteServer = raw_input("Server: ")
        
        
        if self.configReader.has_option("ftp","remoteUser"):
            remoteUser = self.configReader.get_value("ftp","remoteUser")
        else:
            remoteUser = raw_input("Username: ")
        
        if self.configReader.has_option("ftp","remotePassword"):
            remotePassword = self.configReader.get_value("ftp","remotePassword")
            savePass = True
        else:
            remotePassword = getpass.getpass("Password: ")
            if(self.configReader.has_option("ftp","savePass") == False):
                if raw_input("Save password (y/n):").lower() == "y":
                    savePass = True
            else:
                savePass = False
        
        if self.configReader.has_option("ftp","remoteDir"):
            remoteDir = self.configReader.get_value("ftp","remoteDir")
        else:
            remoteDir = raw_input("Remote directory (default=/): ")
        
        while remoteDir.startswith("/"):
            remoteDir = remoteDir[1:]
        
        while remoteDir.endswith("/"):
            remoteDir = remoteDir[:-1]
        
        try:
            self.ftp = ftplib.FTP(remoteServer,remoteUser,remotePassword)
            self.ftp.cwd("/" + remoteDir)
        except ftplib.all_errors as connectionError:
            print "Error connecting to server: ", connectionError
            if raw_input("Retry (y/n)?: ").lower() == "y":
                self.connectFTP()
            else:
                exit(255)
                
        self.rootFolder =  remoteDir
    
    def parseDirectories(self):
        self.dirs = {}
        for file in self.updatedFiles:
            dirs = file.split('/')[:-1]
            cwd = self.dirs
            for dir in dirs:
                if dir not in cwd:
                    cwd[dir] = {}
                    
                cwd = cwd[dir]
    
    def checkDirectories(self,cwd = "",folders = {}):
        if cwd == "":
            cwd = "/" + self.rootFolder
            folders = self.dirs
        if self.ftp:
            print "Checking folders under ", cwd
            
            for dir,subFolders in folders.iteritems():
                
                print "Checking ", cwd + "/" + dir
                try:
                    self.ftp.cwd(cwd + "/" + dir)
                except:
                    print "Creating previously non-existing folder", cwd + "/" + dir
                    self.ftp.mkd(cwd + "/" + dir)
                self.checkDirectories(cwd+"/"+dir,subFolders)
                
            if cwd == "/" + self.rootFolder:
                self.ftp.cwd(cwd)
    
        
    def uploadFiles(self):
        for file in self.updatedFiles:
            self.ftp.storbinary("STOR " + file,open(file,'r'))
        infoWriter = self.repo.config_writer()
        infoWriter.set_value('ftp','lastDeploy',self.repo.head.reference.log()[-1].newhexsha)

if __name__ == "__main__":
    deploy = Deploy()
    deploy.checkFiles()
    deploy.connectFTP()
    deploy.parseDirectories()
    deploy.checkDirectories()
    deploy.uploadFiles()

